import os
import tkinter as tk
from .GUI_Style import GuiStyle
from .GUI_menu_bar import MenuBar
from .GUI_StartPage import StartPage
from .GUI_HomePage import HomePage
from ..Aux_Functions.App_AuxFunctions import message_boxes
from ..Aux_Functions.FileManager import open_pdf_or_image_file, prepare_file_save
from ..Template_Manager.template_aux_functions import open_create_template


class GuiInterface(tk.Tk):
    """ GUI main Class that is used as the app window initializer"""

    def __init__(self, icon_path="", main_path="", exe_path="", *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        tk.Tk.iconbitmap(self, default=icon_path)
        tk.Tk.wm_title(self, "Leitor Faturas - OCR")
        tk.Tk.resizable(self, width=True, height=True)
        tk.Tk.grid_rowconfigure(self, 0, weight=1)
        tk.Tk.grid_columnconfigure(self, 0, weight=1)

        # variable to store username and his/her information within the tool
        self.username = None
        self.user_permission = None

        self.main_file_path = main_path
        self.exe_file_path = exe_path
        self.app_icon_path = icon_path
        self.last_used_filepath = ""
        self.all_temp_files = []

        # fill - fill entire space, expand - expand beyond the limits defined by used
        container = tk.Frame(self, bg="navy")
        # container.pack(side="top", fill="both", expand=True)
        container.grid(row=0, column=0, sticky="nsew")
        container.grid_rowconfigure(0, weight=1)  # 0 - minimum size, weight=1 - defines priority
        container.grid_columnconfigure(0, weight=1)

        # use class instance to define the menu bar of main window
        self.menu_bar = MenuBar(self)
        tk.Tk.config(self, menu=self.menu_bar)

        # Add some style
        self.style = GuiStyle()

        # dictionary that will contain different pages and will be used to show the selected window by the user
        self.frames = {}
        for F in (StartPage, HomePage):
            frame = F(container, self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, stick="nsew")  # stretch orientation system: nsew - north, south, east, west
            frame.grid_remove()

        # bind global events generated by buttons
        self.bind('<<HookDeleteReading>>', self._hook_delete_reading)
        self.bind('<<HookRunOCR>>', self._hook_run_tesseract_ocr)
        self.bind('<<LoadExistentResults>>', self._load_existent_invoice_results)
        self.bind('<<OpenPDForImagefiles>>', self._open_files)
        self.bind('<<PrepareFileSave>>', self._prepare_file_save)
        self.bind('<<PrepareValidationSave>>', self._prepare_validation_save)
        self.bind('<<OpenCreateTemplate>>', self._open_create_template)
        self.bind('<<OpenModifyTemplate>>', self._open_modify_template)
        self.bind('<<CloseApp>>', self.on_delete)

        self.show_frame(StartPage)
        # put focus on username entry
        self.frames[StartPage].username_entry.focus_set()

    def _hook_delete_reading(self, event):
        """hook used to delete current OCR reading"""
        if len(self.frames[HomePage].validationFrame.OCR_results) > 0:
            self.frames[HomePage].validationFrame.delete_reading()
        else:
            message_boxes("warning", "Eliminar Leitura Actual", "Leitura inexistente, pedido nÃ£o concretizado.")

    def _hook_run_tesseract_ocr(self, event):
        """hook used to send user to HomePage function - run_tesseract_ocr"""
        if len(self.frames[HomePage].opened_files_tree.files_tree.selection()) > 0:
            selection = self.frames[HomePage].opened_files_tree.files_tree.selection()  # get file selection from tree
            self.frames[HomePage].run_tesseract_ocr(selection)
        elif len(self.frames[HomePage].opened_files_tree.files_tree.get_children("")) != 0:
            self.frames[HomePage].run_tesseract_ocr([])
        else:
            message_boxes("warning", "Fatura(s) Inexistente(s)",
                          "Abra a(s) fatura(s) antes de proceder com a leitura OCR.")

    def _load_existent_invoice_results(self, event):
        """ function used to load method from Home Page """
        self.frames[HomePage].load_existent_OCR_results()

    def _open_files(self, event):
        list_of_files, _all_temp_files, last_used_filepath = open_pdf_or_image_file(self.frames[HomePage],
                                                                                    self.all_temp_files,
                                                                                    self.main_file_path,
                                                                                    self.last_used_filepath)
        if list_of_files:
            self.all_temp_files = _all_temp_files
            self.last_used_filepath = last_used_filepath
            # enable button to run OCR - just in case it is set as disabled
            self.frames[HomePage].validationFrame.run_selected["state"] = "normal"
            # add list of files opened by the user to open files tree
            self.frames[HomePage].opened_files_tree.update_file_tree(list_of_files)
            # show_frame
            self.show_frame(HomePage)
        
        return

    def _open_create_template(self, event):
        """Event handler to redirect user request to correct function"""
        _all_temp_files = open_create_template("new", self, self.frames[HomePage],
                                               self.all_temp_files, self.main_file_path, self.exe_file_path, None, None)
        self.all_temp_files = _all_temp_files

    def _open_modify_template(self, event):
        """Event handler to redirect user request to correct function"""
        _all_temp_files = open_create_template("modify", self, self.frames[HomePage],
                                               self.all_temp_files, self.main_file_path, self.exe_file_path,
                                               self.frames[HomePage].validationFrame.roi,
                                               self.frames[HomePage].validationFrame.template_paths)
        self.all_temp_files = _all_temp_files

    def on_delete(self):
        answer = message_boxes("askyesno", "Sair do Programa?", "Tem a certeza que pretende sair?")
        if answer == 1:
            if len(self.frames[HomePage].opened_files_tree.files_validated_tree.get_children("")) > 0:
                answer = message_boxes("askyesno", "Gravar Ficheiros?", "Deseja gravar as leituras validadas?")
                if answer == 1:
                    self._save_to_quit()
            try:
                self.frames[HomePage].imageFrame.canvas_image.destroy()
            except AttributeError:
                pass
            root_path = self.main_file_path + "\\Imagens_de_Faturas\\"
            try:
                self.frames[HomePage].ocr_reader.join() if self.frames[HomePage].ocr_reader.is_alive() else None
            except AttributeError:
                pass
            for f in self.all_temp_files:
                if os.path.exists(f):
                    os.remove(f)
            if os.path.exists(root_path):
                if len(os.listdir(root_path)) != 0:
                    for f in os.listdir(root_path):
                        os.remove(os.path.join(root_path, f))
                try:
                    os.rmdir(root_path)
                except PermissionError or OSError:
                    self.quit()
            self.quit()

    def _prepare_validation_save(self, event):
        prepare_file_save(self.frames[HomePage].validationFrame, self.exe_file_path,
                          save_all=False, to_quit=False)

    def _prepare_file_save(self, event):
        prepare_file_save(self.frames[HomePage].validationFrame, self.exe_file_path,
                          save_all=True, to_quit=False)

    def _save_to_quit(self):
        prepare_file_save(self.frames[HomePage].validationFrame, self.exe_file_path,
                          save_all=True, to_quit=True)

    def show_frame(self, cont):
        for fme in self.frames:  # Remove all frames
            self.frames[fme].grid_remove()
        frame = self.frames[cont]
        frame.grid()
        frame.tkraise()  # bring window to front
        self.update_idletasks()

        if cont == HomePage:
            self.frames[cont].imageFrame.canvas_image.fit()

# add path checks before running the actual program
# make sure that all files that are used during the program initialization are available
